변수 : 저장공간
	x	=	10
      저장공간의	대입	값(상수)
	이름	연산자

자료형(type, 종류)

	자료형	type	byte	값
	
	정수형	int	4	0, -123, 123, 2147483647,...
	실수형	float	4	3.1F, 0.0F, 3.0F, -12.156F,...
		double	8	3.1, 0.0, 3.0, -12.156,...
	문자형	char	2	'a', '0', '한',...
	문자열	String	?	"a", "0.0", "한동석", "ABC",...

변수의 선언
	자료형 변수명 = 초기값;
	자료형 변수명;

	예)
	int x = 10;
	x라는 이름의 저장공간이 할당되고 그 안에 10이 들어간다.

RAM(메모리)
==================
OS kernel space		: 드라이버
==================
Stack			: 지역변수, 매개변수
==================
Heap			: 동적 메모리
==================
BSS			: 직접 초기화되지 않은 전역변수
==================
Data 영역		: 전역변수, 정적변수
==================
Text 영역		: 상수, 코드
==================

	int x = 10;
	x라는 이름의 저장공간이 RAM에 할당되고 10이라는 값이 들어간다.

주소
	int x = 10;
	x라는 이름의 저장공간이 RAM에 할당되면 고유한 값인 주소값이 부여된다.
	계속 실행되거나 종료되는 프로그램이 있기 때문에, 주소값은 변경될 수 있으나
	중복은 없다.

변수의 사용
	int data = 20;	// 저장공간
	data = 30; // 저장공간
	System.out.print(data + 9); // 값
	data = data + 7; // 저장공간, 값
	data - 9;

변수 선언 시 주의사항
	1. 같은 이름의 변수로 선언할 수 없다.
	2. 초기화를 해준다.
	3. 되도록 선언부에 한꺼번에 선언한다(영역 상단).

변수명 주의사항
	문자로 시작해야 한다.
	특수문자는 사용할 수 없다. 단, _는 허용한다.
	되도록 소문자만 사용한다.
	공백을 사용할 수 없다.

	goodBoy : 카멜 표기법
	good_boy : 파스칼 표기법, 스네이크 표기법, 팟홀 표기법

	되도록 한글은 사용하지 않는다.
	명사로 사용한다.
	뜻이 있는 단어를 사용한다.
	a, b, c, d, e,...(X)
	data, number, num, age, name, ...(O)

변수를 사용하는 이유
	1. 반복되는 값을 쉽게 관리할 수 있다.
	2. 의미 없는 값을 하나의 정보로 만들기 위해서 사용한다(자료구조)
=========================================================================
서식문자(format)
	반드시 따옴표 안에서 작성한다.

	%d	decimal(10진수 정수)
	%o	octal(8진수 정수)
	%x	hexadecimal(16진수 정수)
	%f	float(실수)
	%c	character(문자)
	%s	string(문자열)

출력 메소드
	printf() : 서식문자를 사용하여 출력할 수 있으며, 자동으로 줄바꿈되지 않는다.
============================================================================
상수
	항상 그대로인 수.
	값을 변경할 수 없도록 한다.

	final 자료형 상수명 = 값;
-----------------------------------------------------------------------------
형변환
	- 자동 형변환
		정수 + 정수 = 정수
		정수 + 실수 = 실수
		3 + 0.0 = 3.0

		문자 + 정수 = 정수

	- 강제 형변환
		(자료형)값
		(double)3

문자열 형변환
	1. 다른 자료형을 문자열로
		문자열과 다른 일반 자료형을 연결하면 결과는 항상 문자열이 된다.

	2. 문자열을 다른 자료형으로
		일반 자료형은 일반 자료형끼리만 형변환이 가능하다.
		문자열 타입은 클래스타입이므로, 일반 자료형의 클래스타입의 도움을 받아야 한다.
		Integer.parseInt(""); => 문자열에서 변환된 정수값
		Float.parseFloat(""); => 문자열에서 변환된 실수값
		Double.parseDouble(""); => 문자열에서 변환된 실수값
===============================================================================
입력
	커서가 깜빡이고 있는 상태.
	입력하기 전에 출력을 통해 어떤 값을 입력해야할 지 사용자에게 알려주어야 한다.

입력 클래스
	Scanner sc = new Scanner(System.in);

입력 메소드(콘솔창에서 커서를 깜빡여주기 위해 사용)
	next() : 사용자가 입력한 문자열 값
		- 사용자가 입력한 값 중 공백 또는 줄부꿈 문자를 구분점으로 각 문자열을 분리한다.
		- 첫 번째 문자열을 첫 번째 next()에 담고
		  두 번째 문자열은 두 번째 next()에 담는다.

	nextLine() : 사용자가 입력한 문자열 값
		- 공백 또는 줄바꿈 문자도 값으로 취급하기 때문에 그대로 입력받는다.


























