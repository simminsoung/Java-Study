클래스(반)
	공통요소를 한 번만 선언해 놓고 가져다 사용만 하도록 설계한다.

	1. 타입이다
		클래스 안에 선언된 변수와 메소드를 사용하고 싶다면,
		해당 클래스 타입으로 변수를 선언해야 한다.
	2. 주어이다
		Monkey.eat("바나나");
		주어    동사  목적어

클래스 선언
	class 클래스명 {
		필드(변수, 메소드)
	}

클래스의 필드 사용
	1. 객체화(instance) : 객체(instance variable)를 만드는 작업, 추상적인 개념을 구체화시키는 작업.
		클래스명 객체명 = new 생성자();
		객체명.필드명
		※ .(마침표) : 하위 연산자, 멤버변수 접근 연산자, 닷 연산자, 점 연산자
	2.

생성자
	클래스 이름 뒤에 소괄호가 있는 형태, 메소드와 기능이 똑같지만 메소드라고 부르지 않는다.
	생성자는 리턴이라는 기능이 존재하지 않기 때문이다.

	1. 해당 클래스의 필드를 메모리에 할당한 후 부여된 주소값을 가져온다.
	2. 초기화

기본 생성자
	매개변수와 실행할 문장이 따로 없다.
	클래스 선언 시, 자동으로 선언되며, 사용자가 직접 생성자를 선언하게 되면
	기본 생성자는 없어진다.

this
	필드에 접근한 객체가 누구인지 알아야 해당 필드에 접근할 수 있다.
	이 때 접근한 객체가 가지고 있는 필드의 주소값을 this라는 변수에 자동으로 담긴다.

다형성(polymorphism)
	1. 오버로딩(Overloading)
		매개변수의 개수 또는 타입이 다르면 동일한 이름의 메소드로 선언할 수 있다.

	2.
--------------------------------------------------------------------------------
[실습]
	모여라 셀럽동물
	- 육식동물 금지

	이름, 나이, 먹이, 먹이개수, 생명

	1. 먹기
		먹이가 있다면,
		먹이 1개 사용, 생명 1 회복

	2. 자기
		3초동안 생명 1 회복

	3. 산책하기
		생명 1 감소
		랜덤한 퀴즈를 출력하고 정답을 맞추면 먹이 2개 획득
		오답 시 생명 1 감소
		생명이 0이 되었다면 강제로 잠재우기

	4. 작별 인사하기




















